# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet enum "as_enum :field, [...], prefix: true, map: :string" b!
as_enum :${1:field}, ${2:[:${3:value1}]}${4:, prefix: true, map: :string}
endsnippet

snippet @ "@var = var" i
@${1:var} = $1
endsnippet

snippet defi "def initialize" i
def initialize(${1:args})
  ${2:`!p snip.rv = "\n\t\t".join(map(lambda x: snip.mkline("@" + x.strip() + " = " + x.strip()), t[1].split(","))
)`}
end
endsnippet

snippet cls "class Foo::Bar::Vim::Something ... end" i
class ${1:`!p snip.rv = class_name_joined(path)`}
	${0}
end
endsnippet

snippet attr "attribute :name, Value" i
attribute :${column}, ${String}
endsnippet

snippet bel "belongs_to :model, optional: true" i
belongs_to :${1:model}${2:, optional: ${3:true}}
endsnippet

snippet can "can(:manage, Class, user: @user)" i
can(${1::manage}, ${2:Class}${3:, ${4:field}: ${5:value}})
endsnippet

snippet dol "do |code|" i
do |${1:code}|
  ${2:}
end
endsnippet

snippet find_by "find_by(column: value)" i
find_by(${1:column}: ${2:value})
endsnippet

snippet hasm "has_many :models, class_name: 'class'" i
has_many :${1:models}${2:, class_name: '${3:class}'}
endsnippet

snippet has_many "has_many :models, class_name: 'class'" i
has_many :${1:models}${2:, class_name: '${3:class}'}
endsnippet

snippet now "Time.zone.now" i
Time.zone.now
endsnippet

snippet numericality: "numericality: { | }" i
numericality: { ${2|greater_than,greater_than_or_equal_to,less_than,less_than_or_equal_to,equal_to,other_than|}: ${3:100} }
endsnippet

snippet resc "rescue StandardError => e" i
rescue ${StandardError} => ${1:e}
  ${2:}
endsnippet

snippet rescb "rescue StandardError => e ... byebug" i
rescue StandardError => e
  byebug
endsnippet

snippet rescr "rescue StandardError => e ... Rollbar.error(e)" i
rescue StandardError => e
  Rollbar.error(e, ${${1:item}: ${2:value}})
endsnippet

snippet strf "UTC Timestamp" i
strftime('%Y/%m/%d')
endsnippet

snippet strfpt "BR Timestamp" i
strftime('%d/%m/%Y')
endsnippet

snippet trans "ActiveRecord::Base.transaction(...) do" i
ActiveRecord::Base.transaction(joinable: false, requires_new: true) do
endsnippet

snippet vali "validates :field, presence: true" i
validates :${1:field}${2:, ${3:presence}: ${4:true}}
endsnippet

snippet where "where(field: value)" i
where(${1:field}: ${2:value})
endsnippet

snippet contw "context 'when something' do .. end" i
context 'when ${1:something}' do
  $0
end
endsnippet

snippet descc "description '#call' do ... end" i
describe '#call' do
  $0
end
endsnippet

snippet minitest "minitest spec file" i
require 'test_helper'

class ${1:`!p snip.rv = rb_spec_name(path)`} < ActiveSupport::TestCase
  $0
end
endsnippet

snippet itiexp "it { is_expected.to be_valid }" i
it { is_expected.to ${1:be_valid} }
endsnippet

snippet letm "{ create(:$1${2:, $3}) }" i
let(:${1:model_name}) { create(:$1${2:, $3}) }
endsnippet

snippet let!m "{ create(:$1${2:, $3}) }" i
let!(:${1:model_name}) { create(:$1${2:, $3}) }
endsnippet

snippet letparams "let(:params) do { ... } end" i
let(:params) do
  {
    ${0:}
  }
end
endsnippet

global !p
def camel_case(s):
	from re import sub

	s = sub(r"(_|-)+", " ", s).title().replace(" ", "")
	return "".join([s[0], s[1:]])


def class_name_joined(path):
	if "app/" in path:
		folder_path = "app/"
	elif "lib/" in path:
		folder_path = "lib/"
	else:
		folder_path = "/"

	file_path = path.split(folder_path)
	file_path = file_path[len(file_path) - 1]
	file = file_path.split("/")

	file[len(file) - 1] = re.sub(
			"_spec$", "", file[len(file) - 1].replace(".rb", "")
	)

	camelized = list(map(lambda item: camel_case(item), file))

	del camelized[0]

	return "::".join(camelized)

	return camelized

def rb_spec_name(path):
	import re

	if "spec/" in str(path):
		test_path = path.split("spec/")
		test_path = test_path[len(test_path) - 1]

		file = test_path.split("/")
		file[len(file) - 1] = re.sub(
				"_spec$", "", file[len(file) - 1].replace(".rb", "")
		)
		file.pop(0)

		camelized = list(map(lambda item: camel_case(item), file))

		return "::".join(camelized)
	else:
		test_path = path.split("test/")
		test_path = test_path[len(test_path) - 1]

		file = test_path.split("/")
		file[len(file) - 1] = re.sub(
				"^test_", "", re.sub("_test$", "", file[len(file) - 1].replace(".rb", ""))
		)
		file.pop(0)

		camelized = list(map(lambda item: camel_case(item), file))

		return "::".join(camelized)
endglobal

snippet rspec "Rspec.describe Class, type: :model do ... end" i
require 'rails_helper'

RSpec.describe ${1:`!p snip.rv = rb_spec_name(path)`}, type: :${2:model} do
  $0
end
endsnippet

snippet template_test "Rspec.describe Class, type: :model do ... end" i
require 'rails_helper'

RSpec.describe ${1:`!p snip.rv = rb_spec_name(path)`}, type: :${2:model} do
  $0
end
endsnippet

snippet greater_than: "greater_than" i
greater_than: ${1:0}
endsnippet

snippet greater_than_or_equal_to: "greater_than_or_equal_to" i
greater_than_or_equal_to: ${1:0}
endsnippet

snippet equal_to: "equal_to" i
equal_to: ${1:100}
endsnippet

snippet less_than: "less_than" i
less_than: ${1:100}
endsnippet

snippet less_than_or_equal_to: "less_than_or_equal_to" i
less_than_or_equal_to: ${1:100}
endsnippet

snippet other_than: "other_than" i
other_than: ${1:50}
endsnippet

snippet strftime "strftime('%Y-%m-%d') or strftime('%d-%m-%Y')" i
strftime(${1|'%Y-%m-%d','%d-%m-%Y'|})
endsnippet

snippet presence: "presence:" i
presence: ${1:true}
endsnippet
snippet uniqueness: "uniqueness:" i
uniqueness: ${1:true}
endsnippet

snippet allow_nil "allow_nil:" i
allow_nil: ${1:true}
endsnippet

snippet allow_blank: "allow_blank:" i
allow_blank: ${1:true}
endsnippet

snippet optional: "optional:" i
optional: ${1:true}
endsnippet

snippet before_action "before_action" i
before_action ${1::${2:method}}
endsnippet

snippet skip_before_action "skip_before_action" i
skip_before_action ${1::${2:method}}
endsnippet

snippet protect_from_forgery "protect_from_forgery" i
protect_from_forgery {$1:with: ${2::${3:method}}}
endsnippet

snippet rescue_from: "rescue_from" i
rescue_from: ${1::${2:method}}
endsnippet

snippet at_beginning_of_day "at_beginning_of_day" i
at_beginning_of_day
endsnippet

snippet at_end_of_day "at_end_of_day" i
at_end_of_day
endsnippet

snippet beginning_of_day "beginning_of_day" i
beginning_of_day
endsnippet

